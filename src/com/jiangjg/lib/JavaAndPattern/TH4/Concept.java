package com.jiangjg.lib.JavaAndPattern.TH4;

public class Concept {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		/*
		 * 开-闭原则  在设计一个模块的时候，应当使这个模块可以在不被修改的前提下被扩展
		 * 		抽象化是关键	对可变性的封装的主题
		 * 里氏代换原则	任何基类可以出现的地方，子类一定可以出现
		 * 依赖倒转原则	要依赖于抽象，不要依赖于实现
		 * 合成/聚合原则	要尽量使用合成/聚合，而不是继承关系达到复用的目的
		 * 迪米特法则		一个软件实体应该与尽可能少的其它实体发生相互作用
		 * 接口隔离原则	应该为客户端提供小的单独的接口，而不要提供大的总接口
		 * 策略模式	如果有一组算法，那么就将每一个算法封装起来，使得他们可以互换
		 * 简单工厂模式	开-闭原则要求系统允许新的产品加入系统中，而无需对现有代码进行修改，此模式对消费角色成立而对于工厂角色不成立
		 * 工厂方法模式	具体工厂类都有共同的接口，它们生产出很多处于一个等级结构的产品对象。新加产品只需要新增一个相应的具体工厂类就可以了
		 * 抽象工厂模式	其封装了产品对象家族的可变化性，一方面使系统可以动态的将一个产品实例化，另一方面当引进新产品时不必改变已有的系统
		 * 建造模式		封装了一个有内部结构的产品对象的过程
		 * 桥梁模式		新的实现逻辑可以创建新的具体实现化类加入到系统里面
		 * 门面模式		可以改变子系统内部功能而不影响客户端
		 * 调停者模式		使用一个调停者对象协调各个同事对象的相互作用
		 * 迭代子模式		将访问聚集元素的逻辑封装起来，并且使它独立于聚集对象的封装。这就提供了聚集存储逻辑与迭代逻辑独立演变的空间
		 */

	}

}
